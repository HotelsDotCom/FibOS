{
   "name": "uieMarker",
   
   "description": {
      "type": "Manager Component",
      "text": "Adds Font infos (family,size,weight) and text boundaries using Venere UX family feeling."
   },
   
   "usage": {
      "text": "<code>var myMarker = new uieMarker(id,options);</code>",
      "list": {
         
         "id"      : ["String",
                      "The <code>ID</code> attribute for the component container."],
         
         "options" : ["Object",
                      "A collection of properties for customize the component's layout and behavior."]
      }
   },
   
   "properties": {
      "text": "You can pass some (or all) of these properties within an object inside constructor.",
      "list": {
         
         "extension"      : ["Object",
                             "{}",
                             "Css extension object for customizable element.",
                             ["markers_container","marker","fontinfo","fontinfo_p","fontinfo_p1","fontinfo_p2","fontinfo_p3"]],
         
         "reference"      : ["String",
                             "\"body\"",
                             "The HTML element for every positioning reference."],
         
         "checkUseMarker" : ["Function",
                             "null",
                             "If this function returns <code>true</code>, the marker will work."],
         
         "checkUseFont"   : ["Function",
                             "null",
                             "If this function returns <code>true</code>, the fontinfo will work."],
         
         "markerClass"    : ["String",
                             "\"uieMarker\"",
                             "Common highlight element class."],
         
         "fontClass"      : ["String",
                             "\"uieFontInfo\"",
                             "Common fontinfo element class."],
         
         "excluded"       : ["String",
                             "\"\" (empty string)",
                             "Selector excluded from marker functionality."],
         
         "taglist"        : ["Object",
                             "{p:true, span:true, strong:true, li:true, h1:true, h2:true, h3:true, h4:true, h5:true, h6:true, a:true, input:true, select:true, textfield:true}",
                             "List of known tags on which to apply the marker."]
      }
   },
   
   "methods": {
      "text": "",
      "list": {
         
         "initEvents()"                : ["uieMarker",
                                          "Adds <code>showmarker</code> event to all child elements of <code>options.reference</code>, adds <code>hidemarker</code> event to all <code>marker</code> elements and returns the component itself."],
         
         "preventDefaults()"           : ["uieMarker",
                                          "Prevent default behaviors for elements from <code>options.taglist</code> and returns the component itself."],
         
         "addMarkerToElement(element)" : ["Boolean",
                                          "Accept param <code>element</code> as HTML DOM Object on which to apply the marker and returns a <code>success</code> Boolean."],
         
         "markEvent(event)"            : ["void",
                                          ""],
         
         "unmarkEvent(event)"          : ["void",
                                          ""]
      }
   },
   
   "example": "function myCallbackMarker(){\n   return false;\n}\nfunction myCallbackFont(){\n   return true;\n}\nvar myExtension = {\n   marker:{'background':'#0f0',opacity:'0.6',top:'0'},\n   markers_container:{'z-index':'9999',top:'0'}\n};\nvar myOptions = {\n   extension      : myExtension,\n   checkUseMarker : myCallbackMarker,\n   checkUseFont   : myCallbackFont,\n   markerClass    : 'textHighlight',\n   taglist        : {a:false,h4:false,h5:false,h6:false}\n};\n\nvar myMarker = new uieMarker('myMarker',myOptions);\n$('body').append(myMarker.initEvents().preventDefaults(true));"

}
