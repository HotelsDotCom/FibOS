{
   "name": "uieSpacer",
   
   "description": {
      "type": "Manager Component",
      "text": "This component let the user to manage whatever spacer he wants with lots of useful behaviors such as add spacers, remove spacers, drag spacers (or move with arrow keys), manage groups of spacers, save/load from HTML5 LocalStorage service."
   },
   
   "usage": {
      "text": "<code>var mySpacer = new uieSpacer(id,options);</code>",
      "list": {
         
         "id"      : ["String",
                      "The <code>ID</code> attribute for the component container."],
         
         "options" : ["Object",
                      "A collection of properties for customize the component's layout and behavior."]
      }
   },
   
   "properties": {
      "text": "You can pass some (or all) of these properties within an object inside constructor.",
      "list": {
         
         "extension"     : ["Object",
                            "{}",
                            "Css extension object for customizable element.",
                            ["main","spacer"]],
         
         "reference"     : ["String",
                            "\"body\"",
                            "The HTML element for every positioning reference."],
         
         "styleTagId"    : ["String",
                            "\"spacer-style\"",
                            "The ID attribute of the <code><style></code> tag that will be appended to the <code><head></code> of the page."],
         
         "localStorage"  : ["String",
                            "\"fibonacciGroups\"",
                            "The name for the key item of LocalStorage service (used for saving and restoring spacers data)."],
         
         "spacerClass"   : ["String",
                            "\"fibospacer\"",
                            "The common class of each spacer."],
         
         "spacerMatch"   : ["RegExp",
                            "/fibospacer|fs|_| /g",
                            "This regular expression will be used to retrieve the number of a single spacer from its classes."],
         
         "grouping"      : ["Boolean",
                            "true",
                            "Using this property with TRUE will enable the grouping.\nIf FALSE, every spacer will be appended directly to the main spacers container."],
         
         "moveCallback"  : ["Function",
                            "null",
                            "This callback will be triggered as soon as a single move operation ends (drag or keypress).\nA single parameter will be passed, which represent the jQuery object of the moved spacer."],
         
         "groupCallback" : ["Function",
                            "null",
                            "This callback will be triggered as soon as a new group of spacers has been created.\nA single parameter will be passed, which represent the ID property of the new group."],
         
         "spacersList"   : ["Array",
                            "[1,2,3,5,8,13,21,34,55,89,144,233]",
                            "This array contains all spacer sizes that will be available to the user."],
         
         "spacerMin"     : ["Number",
                            "3",
                            "The minimum spacer size allowed (should be an element of the <code>spacersList</code> array)."],
         
         "spacerSymbols" : ["Array",
                            "['•','★']",
                            "Symbols used for bigger spacers.\nNote: the first N (<code>spacerColors.length</code>) spacers will have no symbol, the second N spacers will have the first symbol, the third N spacers will have the second symbol, and so on."],
         
         "spacerColors"  : ["Array",
                            "['#0071bc','#ed1e79','#8cc63f','#fbb03b']",
                            "Colors used for each spacer.\nThis array will be cycled as much as <code>spacersList</code> reach its end (ie. every N (<code>spacerColors.length</code>) spacers, the colors will be repeated)."],
         
         "fontSizes"     : ["Array",
                            "['1.35em','2.3em','3.8em','6em','5.5em','9em','14.5em','24em']",
                            "Font-sizes used for every symbols on bigger spacers.\nThe length of this array should be equal to <code>spacerColors.length * spacerSymbols.length</code> ."],
         
         "lineHeights"   : ["Array",
                            "['0.36em','0.45em']",
                            "Line-heights used for every symbols on bigger spacers.\nThere should be a line-height for each symbol (ie. its length should be equal to <code>spacerSymbols.length</code> )."]
      }
   },
   
   "methods": {
      "text": "This component comes with 3 helper properties, each one with a bunch of public methods:\n- <i>getinfo</i>: mostly for getter-like methods\n- <i>storage</i>: for every needs of save, load and restore complete sets or groups of spacers\n- <i>manager</i>: contains methods for manage spacers and groups",
      "list": {
         
         "fibonacciSequence(min,max)"     : ["Array",
                                             "Returns an array containing the Fibonacci' Sequence from.\nParameters <code>min</code> and <code>max</code> represent the Nth values of the sequence."],
         
         "getinfo.spacers()"              : ["Object",
                                             "Returns an object whose each properties is a jQuery spacer object to be cloned."],
         
         "getinfo.spacersList(onlyActive)": ["Array",
                                             "Returns the array of spacer numbers.\nWhen onlyActive is TRUE, the array is filtered using <code>options.spacerMin</code> value."],
         
         "getinfo.spacersGroups()"        : ["Object",
                                             "Returns the <code>spacerGroups</code> object which has 2 properties:\n<code>groups</code>: a list of stored spacers groups\n<code>totalGroups</code>: a method that returns the amount of stored groups."],
         
         "getinfo.spacersJson()"          : ["String",
                                             "Returns a Json string from <code>groups</code> property of <code>spacerGroups</code> object."],
         
         "getinfo.spacerType(spacer)"     : ["String",
                                             "Returns a string representing the number of the given spacer."],
         
         "getinfo.spacerIndex(spacerNum)" : ["Number",
                                             "Returns the <code>spacersList</code> index of the given spacer number.\neg. with <code>spacersList=[1,2,3,5,8,13]</code> this method returns <code>3</code>."],
         
         "storage.save()"                 : ["Boolean",
                                             "Store the current spacers data in the LocalStorage item named as the <code>options.localStorage</code> property."],
         
         "storage.restore(willHide)"      : ["String",
                                             "Load spacers data from LocalStorage service, adds all spacers to the DOM and returns a Json string.\nIf <code>willHide</code> is TRUE, the loaded groups will not be shown."],
         
         "storage.load(json,willHide)"    : ["String",
                                             "Load spacers data from the given Json string, adds all spacers to the DOM and returns the same Json string.\nIf <code>willHide</code> is TRUE, the loaded groups will not be shown."],
         
         "storage.string()"               : ["String",
                                             "Returns a human readable string representing the current spacers groups."],
         
         "manager.setMouseZero(position)" : ["void",
                                             "Updates current <code>mousezero</code> object which should have 2 properties: <code>top</code> and <code>left</code>."],
         
         "manager.addSpacer(size)"        : ["void",
                                             "Adds a new spacer of given <code>size</code> in pixels.\nNote: <code>size</code> parameter should be one of <code>options.spacersList</code> values."],
         
         "manager.dragSpacer(spacer)"     : ["void",
                                             "Begins dragging operation for the given <code>spacer</code>."],
         
         "manager.newUsedGroup(groupName)": ["void",
                                             "Updates <code>lastUsedGroup</code> reference with the given <code>groupName</code>."],
         
         "manager.updateGroups()"         : ["void",
                                             "Updates <code>spacersGroups</code> object with the current spacers data."],
         
         "manager.renameGroup(old,new)"   : ["void",
                                             "Renames the group named <code>old</code> with the given <code>new</code> name."],
         
         "manager.removeGroup(groupName)" : ["void",
                                             "Removes the group named <code>groupName</code> and all of its spacers."],
         
         "manager.removeAll()"            : ["void",
                                             "Removes all groups of spacers."]
      }
   },
   
   "example": "var myOptions = {\n   extension     : { main:{'z-index':'1000'} },\n   spacerMin     : 1,\n   spacerSymbols : ['A','B','C'],\n   spacersList   : [1,5,10,15,20,25,30,35,40,45,50,55,60,65]\n};\n\nvar myspacer = new uieSpacer('fibo_container',myOptions);\n$('body').append(myspacer);"

}
